define("auth_sentry/webcam",["exports"],(function(_exports){Object.defineProperty(_exports,"__esModule",{value:!0}),_exports.default=void 0;return _exports.default=class{constructor(webcamElement){let facingMode=arguments.length>1&&void 0!==arguments[1]?arguments[1]:"user",canvasElement=arguments.length>2&&void 0!==arguments[2]?arguments[2]:null,snapSoundElement=arguments.length>3&&void 0!==arguments[3]?arguments[3]:null;this._webcamElement=webcamElement,this._webcamElement.width=this._webcamElement.width||640,this._webcamElement.height=this._webcamElement.height||this._webcamElement.width*(3/4),this._facingMode=facingMode,this._webcamList=[],this._streamList=[],this._selectedDeviceId="",this._canvasElement=canvasElement,this._snapSoundElement=snapSoundElement}get facingMode(){return this._facingMode}set facingMode(value){this._facingMode=value}get webcamList(){return this._webcamList}get webcamCount(){return this._webcamList.length}get selectedDeviceId(){return this._selectedDeviceId}getVideoInputs(mediaDevices){return this._webcamList=[],mediaDevices.forEach((mediaDevice=>{"videoinput"===mediaDevice.kind&&this._webcamList.push(mediaDevice)})),1==this._webcamList.length&&(this._facingMode="user"),this._webcamList}getMediaConstraints(){var videoConstraints={};return""==this._selectedDeviceId?videoConstraints.facingMode=this._facingMode:videoConstraints.deviceId={exact:this._selectedDeviceId},{video:videoConstraints,audio:!1}}selectCamera(){for(let webcam of this._webcamList)if("user"==this._facingMode&&webcam.label.toLowerCase().includes("front")||"enviroment"==this._facingMode&&webcam.label.toLowerCase().includes("back")){this._selectedDeviceId=webcam.deviceId;break}}flip(){this._facingMode="user"==this._facingMode?"enviroment":"user",this._webcamElement.style.transform="",this.selectCamera()}async start(){let startStream=!(arguments.length>0&&void 0!==arguments[0])||arguments[0];return new Promise(((resolve,reject)=>{this.stop(),navigator.mediaDevices.getUserMedia(this.getMediaConstraints()).then((stream=>{this._streamList.push(stream),this.info().then((webcams=>{this.selectCamera(),window.console.log(webcams),startStream?this.stream().then((facingMode=>{resolve(this._facingMode),window.console.log(facingMode)})).catch((error=>{reject(error)})):resolve(this._selectedDeviceId)})).catch((error=>{reject(error)}))})).catch((error=>{reject(error)}))}))}async info(){return new Promise(((resolve,reject)=>{navigator.mediaDevices.enumerateDevices().then((devices=>{this.getVideoInputs(devices),resolve(this._webcamList)})).catch((error=>{reject(error)}))}))}async stream(){return new Promise(((resolve,reject)=>{navigator.mediaDevices.getUserMedia(this.getMediaConstraints()).then((stream=>{this._streamList.push(stream),this._webcamElement.srcObject=stream,"user"==this._facingMode&&(this._webcamElement.style.transform="scale(-1,1)"),this._webcamElement.play(),resolve(this._facingMode)})).catch((error=>{window.console.log(error),reject(error)}))}))}stop(){this._streamList.forEach((stream=>{stream.getTracks().forEach((track=>{track.stop()}))}))}snap(){if(null!==this._canvasElement){null!==this._snapSoundElement&&this._snapSoundElement.play(),this._canvasElement.height=this._webcamElement.scrollHeight,this._canvasElement.width=this._webcamElement.scrollWidth;let context=this._canvasElement.getContext("2d");return"user"==this._facingMode&&(context.translate(this._canvasElement.width,0),context.scale(-1,1)),context.clearRect(0,0,this._canvasElement.width,this._canvasElement.height),context.drawImage(this._webcamElement,0,0,this._canvasElement.width,this._canvasElement.height),this._canvasElement.toDataURL("image/png")}throw"canvas element is missing"}},_exports.default}));

//# sourceMappingURL=webcam.min.js.map